npm install -global @ui5/cli
ui5 --help
npm init --yes
ui5 init
ui5 serve
When u initialize sap ui5 resource it is called bootstrapping

sap web ide personal edition
frontend
jdk 1.8

Use sap.ui.define for controllers and all other JavaScript modules to define a global namespace.
 With the namespace, the object can be addressed throughout the application.

Use sap.ui.require for asynchronously loading dependencies but without declaring a namespace,
 for example code that is directly executed and is not referenced in other places.

The helper method sap.ui.core.ComponentContainer instantiates the component by searching for 
 a Component.js file in the namespace that is passed in as an argument. 

All application-specific configuration settings will now further be put in a separate descriptor
 file called manifest.json. This clearly separates the application coding from the configuration
 settings and makes our app even more flexible. For example, all SAP Fiori applications are
 realized as components and come with a descriptor file in order to be hosted in the
 SAP Fiori launchpad.

The SAP Fiori launchpad acts as an application container and instantiates the app 
 without having a local HTML file for the bootstrap. Instead, the descriptor 
 file will be parsed and the component is loaded into the current HTML page. 
 This allows several apps to be displayed in the same context. Each app can define 
 local settings, such as language properties, supported devices, and more. 
 And we can also use the descriptor file to load additional resources and instantiate 
 models like our i18n resource bundle.

 #CSS
 --CSS class sapUiResponsiveMargin
 add a large space between the letterbox on the left and right side and also a bit of space
 to the top and bottom. We have to set the width of the panel to auto since the margin would
 otherwise be added to the default width of 100% and exceed the page size.
 If you decrease the screen size, then you can actually see that the margin also decreases.
 As the name suggests, the margin is responsive and adapts to the screen size of the device.
 Tablets will get a smaller margin and phones in portrait mode will not get a margin to save
 space on these small screens.
--CSS class sapUiSmallMarginEnd
--CSS class sapUiSmallMargin

Fragments are light-weight UI parts (UI subtrees) which can be reused but do not have any controller.
 This means, whenever you want to define a certain part of your UI to be reusable across multiple 
 views, or when you want to exchange some parts of a view against one another under certain 
 circumstances (different user roles, edit mode vs read-only mode), a fragment is a good candidate, 
 especially where no additional controller logic is required.
A fragment can consist of 1 to n controls. At runtime, fragments placed in a view behave similar 
 to "normal" view content, which means controls inside the fragment will just be included into the 
 viewâ€™s DOM when rendered. There are of course controls that are not designed to become part of a view, 
 for example, dialogs.
Dialogs are special, because they open on top of the regular app content and thus do not belong to
 a specific view. That means the dialog must be instantiated somewhere in the controller code, 
 but since we want to stick with the declarative approach and create reusable artifacts to be as 
 flexible as possible, we will create an XML fragment containing the dialog. A dialog, after all, 
 can be used in more than only one view of your app.